# code: language=ansible

- name: Set default variables
  hosts: mbme
  roles:
    - role: django
  tasks:
    - name: Check export filename
      ansible.builtin.set_fact:
        # export_filename: '{{ project_slug }}.sql.gz'
        export_filename: '{{ project_slug }}.tar'
      when: export_filename is not defined

    - name: Build full export path
      ansible.builtin.set_fact:
        export_path: '{{ project_root }}/export/{{ export_filename }}'

- name: Export local database
  hosts: athena
  roles:
    - role: django
  tasks:
    - name: Create export directory
      ansible.builtin.file:
        state: directory
        path: '{{ project_root }}/export'
        mode: '0755'

    - name: Check if file exists
      ansible.builtin.stat:
        path: '{{ export_path }}'
      register: export_stat_res
      failed_when: export_stat_res.stat.exists and force is not defined

    - name: Export database
      community.postgresql.postgresql_db:
        state: dump
        name: '{{ pg_dbname }}'
        login_host: '{{ pg_host }}'
        login_user: '{{ pg_user }}'
        login_unix_socket: '{{ pg_sock | default(None) }}'
        login_password: '{{ pg_admin_pass | default(None) }}'
        target: '{{ export_path }}'
        # dump_extra_args: '--clean --if-exists --create'

- name: Restore local database
  hosts: mbme_prod_one
  roles:
    - role: django
  tasks:
    - name: Copy export to production
      ansible.builtin.copy:
        dest: '/tmp/{{ export_filename }}'
        src: '{{ export_path }}'
        mode: u+rwx

    - name: Rename production database # noqa: ignore-errors
      community.postgresql.postgresql_db:
        state: rename
        target: '{{ pg_dbname }}_orig'
        name: '{{ pg_dbname }}'
        login_host: '{{ pg_host }}'
        login_user: '{{ pg_user }}'
        login_unix_socket: '{{ pg_sock | default(None) }}'
        login_password: '{{ pg_pass | default(None) }}'
      ignore_errors: true

    - name: Are you sure?
      ansible.builtin.pause:

    - name: Create new database
      community.postgresql.postgresql_db:
        name: '{{ pg_dbname }}'
        login_host: '{{ pg_host }}'
        login_user: '{{ pg_user }}'
        owner: '{{ pg_user }}'
        login_unix_socket: '{{ pg_sock | default(None) }}'
        login_password: '{{ pg_pass | default(None) }}'

    - name: Restore exported data
      community.postgresql.postgresql_db:
        state: restore
        target: '/tmp/{{ export_filename }}'
        name: '{{ pg_dbname }}'
        login_host: '{{ pg_host }}'
        login_user: '{{ pg_user }}'
        login_unix_socket: '{{ pg_sock | default(None) }}'
        login_password: '{{ pg_pass | default(None) }}'
        # FAXMI: ?? options do not work...
        # target_opts: '--clean --if-exists --create'

    - name: Are you sure (again)?
      ansible.builtin.pause:

    - name: Drop original database # noqa: ignore-errors
      community.postgresql.postgresql_db:
        state: absent
        name: '{{ pg_dbname }}_orig'
        login_host: '{{ pg_host }}'
        login_user: '{{ pg_user }}'
        login_unix_socket: '{{ pg_sock | default(None) }}'
        login_password: '{{ pg_pass | default(None) }}'
      ignore_errors: true

    - name: Remove export
      ansible.builtin.file:
        path: '/tmp/{{ export_filename }}'
        state: absent
